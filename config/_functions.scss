@use 'sass:map';
@use 'op-maps' as _m;
@use '../animations' as _a;
@use 'sass:string';

/// GET DEEP THEME FUNCTION
/// Retrieves nested theme values from the `$open-props-map` map for the specified `$theme`.
/// Returns null if it can't find a match.
///
/// @param {map} $open-props-map - The map containing the theme values.
/// @param {string} $theme - The theme ('light', 'dark' or the 'cssvar')
/// @param {string} $keys - The key-value to retrieve.


@function get-prop($theme, $key) {
  $result: map.get(_m.$open-props-map, $theme, $key);

  @if $result {
    @return #{$result};
  }
  @warn #{'Open props "' + $key + '" not found in op-maps.$op-props-map for the "' + $theme + '" theme '};
  
  @return null;
}

/// GET DEEP FUNCTION TO ANY DEPTH
/// Retrieves nested values from the `$open-props-map` map.
/// Returns null if it can't find a match.
///
/// @param {Map} $open-props-map - The map containing the values
/// @param {Arglist} $keys - The theme ('light' or 'dark') or the 'cssvar', then the relevant prop. E.g - get-open-oprops('cssvar', 'shadow-1')
/// @return {*} - Desired value to retrieve

@function get-op-props($keys...) {
  @each $key in $keys {
      $get: map-get(_m.$open-props-map, $key);
  }
  @if $get {
    @return #{$get};
  }
  @warn #{'Open props "' + $key + '" not found in op-maps.$open-props-map'};
  
  @return null;
}


/// HSL TO STRING FOR USE IN MIXING OPEN PROPS HSL COLORS
/// This function constructs the HSL/HSLA color value using the provided arguments and returns it as a string.
///
/// @param {...*} $args - The arguments representing the hue, saturation, lightness and alpha values.
/// @returns {String} - The constructed HSL/HSLA color as a string.

@function hsl-to-str($args...) {
  @return #{'hsl(#{$args})'};
}

@function hsla-to-str($args...) {
  @return hsl-to-str($args...);
}

/// MIX FUNCTION
/// This function mixes two colors together based on a specified weight.
///
/// @param {string} $color-space - The color space of the colors.
/// @param {color} $color1 - The first color to mix.
/// @param {color} $color2 - The second color to mix.
/// @param {number, optional} $weight - The weight or ratio of the mixing. Default is 0.5 (50%).
/// @returns {*} - The resulting css color-mix function.

@function mix($color-space, $color1, $color2, $weight: 0.5) {
  @if string.index($color1, "#") {
    @return color-mix(in srgb, $color1, $color2 $weight);
  } @else {
    @return color-mix(in $color-space, $color1, $color2 $weight);
  }
}

/// OPACITY FUNCTION
/// https://dev.to/astrit/a-deep-dive-into-the-css-color-mix-function-and-future-of-colors-on-the-web-2pgi
/// Applies opacity to a color using the specified color space, color, and alpha value.
///
/// @param {string} $color-space - The color space of the color.
/// @param {color} $color - The color to apply opacity to.
/// @param {percentage} $alpha - The alpha value for opacity.
/// @return {*} - The resulting opacity of a color as a css color-mix function.

@function opacity($color-space, $color, $alpha) {
  @return mix($color-space, $color, transparent, $alpha);
}

/// LIGHTER FUNCTION
/// Lightens a color by mixing it with white.
///
/// @param {string} $color-space - The color space of the color.
/// @param {color} $color - The color to lighten.
/// @param {number, optional} $weight - The weight or ratio of the lightening. Default is 0.5 (50%).
/// @returns {*} - The resulting lightened color as a css color-mix function.

@function lighter($color-space, $color, $weight: 0.5) {
  @if $weight >= 0 {
    @return mix($color-space, $color, #fff, $weight);
  } @else {
    @return darker($color-space, $color, -$weight);
  }
}

/// DARKER FUNCTION
/// Darkens a color by mixing it with black.
///
/// @param {string} $color-space - The color space of the color.
/// @param {color} $color - The color to darken.
/// @param {number, optional} $weight - The weight or ratio of the darkening. Default is 0.5 (50%).
/// @returns {*} - The resulting darkened color as a css color-mix function.

@function darker($color-space, $color, $weight: 0.5) {
  @if $weight >= 0 {
    @return mix($color-space, $color, #000, $weight);
  } @else {
    @return lighter($color-space, $color, -$weight);
  }
}

/// CSSVAR FUNCTION
/// Returns the value of a CSS variable using the provided property name.
///
/// @param {string} $prop-name - The property name of the CSS variable.
/// @return {*} - The value of the CSS variable.

@function cssvar($prop-name) {
  @return var(--#{$prop-name});
}

/// ADJUST FUNCTION
/// Adjusts a color by modifying its props ($p1, $p2, $p3) for a given color space.
///
/// @param {string} $color-space - The color space of the color.
/// @param {color} $color - The color to adjust.
/// @param {number, optional} $p1 - The adjustment value for the first prop. Default is 0.
/// @param {number, optional} $p2 - The adjustment value for the second prop. Default is 0.
/// @param {number, optional} $p3 - The adjustment value for the third prop. Default is 0.
/// @param {number, optional} $alpha - The alpha value for transparency. Default is 1.
/// @returns {*} - The resulting adjusted color as a css relative color syntax function.

@function adjust($color-space, $color, $p1: 0, $p2: 0, $p3: 0, $alpha: 1) {
  @if ($color-space == rgb) {
    @return rgb(from $color calc(r + #{$p1}) calc(g + #{$p2}) calc(b + #{$p3}) / $alpha);
  } @else if ($color-space == hsl) {
    @return hsl(from $color calc(h + #{$p1}) calc(s + #{$p2}) calc(l + #{$p3}) / $alpha);
  } @else if ($color-space == oklch) or ($color-space == lch) {
    @return lch(from $color calc(l + #{$p1}) calc(c + #{$p2}) calc(h + #{$p3}) / $alpha);
  } @else {
    @error "The #{$color-space} must be either 'rgb', 'hsl', 'lch' or 'oklch'. Other color spaces are not currently supported";
  }
}

$colorspace-map: (
  rgb: (
    p1: r,
    p2: g,
    p3: b,
  ),
  hsl: (
    p1: h,
    p2: s,
    p3: l,
  ),
  lch: (
    p1: l,
    p2: c,
    p3: h,
  ),
  oklch: (
    p1: l,
    p2: c,
    p3: h,
  ),
);

@function adjustx($color-space, $color, $p1: 0, $p2: 0, $p3: 0, $alpha: 1) {
  $adjustments: ();

  $color-space-config: map-get($colorspace-map, $color-space);

  @each $key, $component in $color-space-config {
    $value: if($p#{$key} != 0, calc(#{$component} + #{$p#{$key}}), #{$component});
    $adjustments: append($adjustments, $value);
  }

  @if ($color-space == rgb) {
    @return rgb(from $color join($adjustments, ' ') / $alpha);
  } @else if ($color-space == hsl) {
    @return hsl(from $color join($adjustments, ' ') / $alpha);
  } @else if ($color-space == oklch) or ($color-space == lch) {
    @return lch(from $color join($adjustments, ' ') / $alpha);
  } @else {
    @error "The #{$color-space} must be either 'rgb', 'hsl', 'lch' or 'oklch'. Other color spaces are not currently supported";
  }
}
