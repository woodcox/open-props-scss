@use 'sass:map';
@use 'op-maps' as _m;
@use 'sass:string';

/// GET DEEP THEME FUNCTION
/// Retrieves nested theme values from the `$open-props-map` map for the specified `$theme`.
/// Returns null if it can't find a match.
///
/// @param {map} $open-props-map - The map containing the theme values.
/// @param {string} $theme - The theme ('light', 'dark' or the 'cssvar')
/// @param {string} $keys - The key-value to retrieve.


@function get-prop($theme, $key) {
  $result: map.get(_m.$open-props-map, $theme, $key);

  @if $result {
    @return #{$result};
  }
  @warn #{'Open props "' + $key + '" not found in op-maps.$op-props-map for the "' + $theme + '" theme '};
  
  @return null;
}

/// GET DEEP FUNCTION TO ANY DEPTH
/// Retrieves nested values from the `$open-props-map` map.
/// Returns null if it can't find a match.
///
/// @param {Map} $open-props-map - The map containing the values
/// @param {Arglist} $keys - The theme ('light' or 'dark') or the 'cssvar', then the relevant prop. E.g - get-open-oprops('cssvar', 'shadow-1')
/// @return {*} - Desired value to retrieve

@function get-op-props($keys...) {
  @each $key in $keys {
      $get: map-get(_m.$open-props-map, $key);
  }
  @if $get {
    @return #{$get};
  }
  @warn #{'Open props "' + $key + '" not found in op-maps.$open-props-map'};
  
  @return null;
}


/// HSL TO STRING FOR USE IN MIXING OPEN PROPS HSL COLORS
/// This function constructs the HSL/HSLA color value using the provided arguments and returns it as a string.
///
/// @param {...*} $args - The arguments representing the hue, saturation, lightness and alpha values.
/// @returns {String} - The constructed HSL/HSLA color as a string.

@function hsl-to-str($args...) {
  @return #{'hsl(#{$args})'};
}

@function create-hd-color($hd-color, $hue) {
  @return color-mix(in oklch, $hd-color, transparent $hue);
}


/// OPACITY FUNCTION
/// https://dev.to/astrit/a-deep-dive-into-the-css-color-mix-function-and-future-of-colors-on-the-web-2pgi
/// Applies opacity to a color using the specified color space, color, and alpha value.
///
/// @param {string} $color-space - The color space of the color.
/// @param {color} $color - The color to apply opacity to.
/// @param {percentage} $alpha - The alpha value for opacity.
/// @return {color} - The resulting color with the applied opacity.

@function opacity($color-space, $color, $alpha) {
  @if ($color-space == oklch) {
    @return color-mix(in $color-space, $color, transparent $alpha);
  }
  @return color-mix(in $color-space, #{'#{$color-space}(#{$color})'}, transparent $alpha);
}

/// CSSVAR FUNCTION
/// Returns the value of a CSS variable using the provided property name.
///
/// @param {string} $prop-name - The property name of the CSS variable.
/// @return {*} - The value of the CSS variable.

@function cssvar($prop-name) {
  @return var(--#{$prop-name});
}


@mixin fade-in-bloom-test($theme: light, $id: 1234) {
  $light-keyframes: "@keyframes fade-in-bloom-#{$id} { 0% { opacity: 0; filter: brightness(1) blur(20px) } 10% { opacity: 1; filter: brightness(2) blur(10px) } 100% { opacity: 1; filter: brightness(1) blur(0) }}";

  $dark-keyframes: "@keyframes fade-in-bloom-#{$id} { 0% { opacity: 0; filter: brightness(1) blur(20px) }  10% { opacity: 1; filter: brightness(0.5) blur(10px) } 100% { opacity: 1; filter: brightness(1) blur(0) }}";

  @if ($theme == dark) {
    @return #{$dark-keyframes};
  }

@return #{$light-keyframes};
}

