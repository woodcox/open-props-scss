.--bg, [style*="--bg:"] {
  background: var(--bg);
}

:root {
  --shadow-color: 100 4% 16%;
  --shadow-strength: 2%;
  --testing-css-vars: op.cssvar(gray-6);
  --shdw-2: 0 3px 5px -2px hsl(var(--shadow-color)/calc(var(--shadow-strength) + 3%)), 0 7px 14px -5px hsl(var(--shadow-color)/calc(var(--shadow-strength) + 5%));
}

@media (prefers-color-scheme: dark) {
  :root {
    --shadow-color: 220 40% 2%;
    --shadow-strength: 25%;
  }
}
.my-test-thing {
  box-shadow: 0 1px 2px -1px Hsl(220 3% 15%/10%);
  box-shadow: 0 1px 2px -1px Hsl(220 40% 2%/34%);
  box-shadow: 0 1px 2px -1px Hsl(var(--shadow-color)/calc(var(--shadow-strength) + 9%));
  color: oklch(74% 0.16 0);
}

.dodo {
  box-shadow: 0 3px 5px -2px Hsl(220 40% 2%/28%), 0 7px 14px -5px Hsl(220 40% 2%/30%);
  background: color-mix(in hsl, oklch(100% 0 0), #000 0.5);
  color: color-mix(in oklch, oklch(74% 0.16 0), transparent 50%);
  color: lch(from oklch(74% 0.16 0) l c 100);
  background-color: oklch(74% 0.16 0);
}

.card {
  position: relative;
  width: 450px;
  height: 100%;
  min-height: 200px;
  padding: 20px;
  margin: 50px auto;
  background-color: hsl(210, 18%, 96%);
  border-radius: 2px;
  border: 0;
  box-shadow: 0 1px 2px -1px hsl(var(--shadow-color)/calc(var(--shadow-strength) + 9%));
}
.card:hover {
  box-shadow: var(--shadow-3);
}

@keyframes fade-in-bloom-dark-uywgfbo {
  0% {
    opacity: 0;
    filter: brightness(1) blur(20px);
  }
  10% {
    opacity: 1;
    filter: brightness(0.5) blur(10px);
  }
  100% {
    opacity: 1;
    filter: brightness(1) blur(0);
  }
}
@keyframes fade-in-bloom-uywgfbo {
  0% {
    opacity: 0;
    filter: brightness(1) blur(20px);
  }
  10% {
    opacity: 1;
    filter: brightness(2) blur(10px);
  }
  100% {
    opacity: 1;
    filter: brightness(1) blur(0);
  }
}
@keyframes fade-in-bloom-uywgfbo {
  0% {
    opacity: 0;
    filter: brightness(1) blur(20px);
  }
  10% {
    opacity: 1;
    filter: brightness(2) blur(10px);
  }
  100% {
    opacity: 1;
    filter: brightness(1) blur(0);
  }
}
/**
 * hd-color Function
 *
 * Generates HD color variations based on the provided hue and opacity values.
 * Supports CSS custom properties for flexibility.
 *
 * @param {Number} $color-hue - The hue value for the color. Defaults to 0.
 * @param {Number} $opacity - The opacity value for the color. Defaults to 0.
 * @returns {Color} - The HD color value.
 */

/*# sourceMappingURL=test.css.map */
