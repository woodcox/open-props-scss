@use '../oklch-hues' as hues;
@use '../colors-hd' as hd with (
  $color-hue: hues.$hue-red,
);
@use '../index' as op;

$shadow-color-light: op.get-prop('light', 'shadow-color');
$shadow-str-light: op.get-prop('light', 'shadow-strength');

$shadow-color-dark: op.get-prop('dark', 'shadow-color');
$shadow-str-dark: op.get-prop('dark', 'shadow-strength');
$shdw-2: op.get-prop('cssvar', 'shadow-2');

:root {
  --shadow-color: 100 4% 16%;
  --shadow-strength: 2%;
  --testing-css-vars: op.cssvar(gray-6);
  --shdw-2: #{$shdw-2};
}

@media (prefers-color-scheme: dark) {
 :root {
   --shadow-color: #{$shadow-color-dark};
   --shadow-strength: #{$shadow-str-dark};
  }
}

.my-test-thing {
  box-shadow: op.shadow(1);
  box-shadow: op.shadow(1, dark);
  box-shadow: op.shadow(1, dark, var(--shadow-color), var(--shadow-strength));
  color: hd.$color-4;
}

.dodo {
  hd.$color-hue: hues.$hue-green;
  box-shadow: op.shadow(2, dark);
  background: op.darker(hsl, oklch(100% 0 0));
  color: op.opacity(oklch, hd.$color-4, 50%);
  color: op.adjustx(oklch, hd.$color-4, $p3: hues.$hue-yellow);
  background-color: hd.$color-4;
}

.card {
  position: relative;
  width: 450px;
  height: 100%;
  min-height: 200px;
  padding: 20px;
  margin: 50px auto;
  background-color: hsl(op.$stone-1-hsl);
  border-radius: op.$radius-1;
  border: 0;
  box-shadow: op.get-prop('cssvar', 'shadow-1');

  &:hover {
    box-shadow: var(--shadow-3);
  }
}

@include op.fade-in-bloom(dark);
@include op.fade-in-bloom(light);
@include op.fade-in-bloom;

/**
 * hd-color Function
 *
 * Generates HD color variations based on the provided hue and opacity values.
 * Supports CSS custom properties for flexibility.
 *
 * @param {Number} $color-hue - The hue value for the color. Defaults to 0.
 * @param {Number} $opacity - The opacity value for the color. Defaults to 0.
 * @returns {Color} - The HD color value.
 */
//@function hd-color($color-hue: 0, $opacity: 0) {
//  $color-0: oklch(99% .03 #{$color-hue} / #{$opacity});
//  $color-1: oklch(95% .06 #{$color-hue} / #{$opacity});
//  $color-2: oklch(88% .12 #{$color-hue} / #{$opacity});
//  $color-3: oklch(80% .14 #{$color-hue} / #{$opacity});
//  $color-4: oklch(74% .16 #{$color-hue} / #{$opacity});
//  $color-5: oklch(68% .19 #{$color-hue} / #{$opacity});
//  $color-6: oklch(63% .20 #{$color-hue} / #{$opacity});
//  $color-7: oklch(58% .21 #{$color-hue} / #{$opacity});
//  $color-8: oklch(53% .20 #{$color-hue} / #{$opacity});
//  $color-9: oklch(49% .19 #{$color-hue} / #{$opacity});
//  $color-10: oklch(42% .17 #{$color-hue} / #{$opacity});
//  $color-11: oklch(35% .15 #{$color-hue} / #{$opacity});
//  $color-12: oklch(27% .12 #{$color-hue} / #{$opacity});
//  $color-13: oklch(20% .09 #{$color-hue} / #{$opacity});
//  $color-14: oklch(14% .07 #{$color-hue} / #{$opacity});
//  $color-15: oklch(11% .05 #{$color-hue} / #{$opacity});
//  $color-bright: oklch(65% .3 #{$color-hue} / #{$opacity});

  // Define CSS custom properties for each color variation
//  @each $i in 0 through 15 {
//    --color-#{$i}: $color-#{$i};
//  }

//  --color-bright: $color-bright;

  // Return the default color value as a fallback
//  @return $color-0;
//}

//.test-thing {
//  color: hd-color(1, 0.5);
//}
