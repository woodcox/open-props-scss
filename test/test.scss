@use 'sass:math';
@use 'sass:map';
@use '../index' as op;

$shadow-color-light: op.get-prop('light', 'shadow-color');
$shadow-str-light: op.get-prop('light', 'shadow-strength');

$shadow-color-dark: op.get-prop('dark', 'shadow-color');
$shadow-str-dark: op.get-prop('dark', 'shadow-strength');
$shdw-2: op.get-prop('cssvar', 'shadow-2');

@mixin style($prop, $value) {
  .#{$value}, [style*="#{$value}:"] {
    #{$prop}: var(#{$value});
  }
}

@include style(background, --bg);

:root {
  --shadow-color: 100 4% 16%;
  --shadow-strength: 2%;
  --testing-css-vars: op.cssvar(gray-6);
  --shdw-2: #{$shdw-2};
}

@media (prefers-color-scheme: dark) {
 :root {
   --shadow-color: #{$shadow-color-dark};
   --shadow-strength: #{$shadow-str-dark};
  }
}

.my-test-thing {
  op.$color-hue: op.$hue-red;
  box-shadow: op.shadow(1);
  box-shadow: op.shadow(1, dark);
  box-shadow: op.shadow(1, dark, var(--shadow-color), var(--shadow-strength));
  color: op.$color-4;
}

.dodo {
  $color-hue: op.$hue-green;
  box-shadow: op.shadow(2, dark);
  background: op.darker(hsl, oklch(100% 0 0));
  color: op.opacity(oklch, op.$color-4, 50%);
  color: op.adjust(oklch, op.$color-4, $p3: op.$hue-yellow);
  background-color: op.$color-4;
}

.card {
  position: relative;
  width: 450px;
  height: 100%;
  min-height: 200px;
  padding: 20px;
  margin: 50px auto;
  background-color: hsl(op.$stone-1-hsl);
  border-radius: op.$radius-1;
  border: 0;
  box-shadow: op.get-prop('cssvar', 'shadow-1');

  &:hover {
    box-shadow: var(--shadow-3);
  }
}

@include op.fade-in-bloom(dark);
@include op.fade-in-bloom(light);
@include op.fade-in-bloom;

// round a number to a fixed numebr of decimal places
@function tofixed($value, $decimal-place: 3) {
  $pow: math.pow(10, $decimal-place);
  @return math.div(math.round($value * $pow), $pow);
}

$rootSize: 16;

$minViewport: 320;
$maxViewport: 1440;

@function generateClamps($tokens) {
  $clamps: ();

  @each $token in $tokens {
    $name: map.get($token, "name");
    
    
    $min: map.get($token, "min");
    $max: map.get($token, "max");
    
    // convert the min and max sizes to rems
    $minSize: math.div($min, $rootSize); // rems
    $maxSize: math.div($max, $rootSize); // rems
    
    // Convert the pixel viewport sizes into rems
    $minViewport: math.div($minViewport, $rootSize);
    $maxViewport: math.div($maxViewport, $rootSize);

    // Slope and intersection allow us to have a fluid value but also keep that sensible
    $slope: tofixed(math.div(($maxSize - $minSize), ($maxViewport - $minViewport)));
    $intersection: tofixed(-$minViewport * $slope + $minSize);
    
    $clampValue: null;
    
    @if ($min == $max) {
      $clampValue: #{"#{$minSize}rem"}
    } @else {
      $clampValue: #{"clamp(#{$minSize}rem, calc(#{$intersection}rem + #{$slope * 100}vw), #{$maxSize}rem)"};
    }
      
    $clamp: (
      "name": $name,
      "value": $clampValue
    );

    $clamps: append($clamps, $clamp);
  }

  @return $clamps;
}

$createTextSizes: generateClamps((
  ("name": "step-0", "min": 16, "max": 18),
  ("name": "step-1", "min": 19, "max": 22),
  ("name": "step-2", "min": 23, "max": 28),
  ("name": "step-3", "min": 27, "max": 35),
  ("name": "step-4", "min": 33, "max": 43)
));

$createSpacing: generateClamps((
  ("name": "zero", "min": 0, "max": 1),
  ("name": "2XS", "min": 4, "max": 8),
  ("name": "XS", "min": 12, "max": 14),
  ("name": "S", "min": 16, "max": 18),
  ("name": "M", "min": 24, "max": 27),
  ("name": "L", "min": 32, "max": 36),
  ("name": "XL", "min": 48, "max": 54),
  ("name": "2XL", "min": 64, "max": 72),
  ("name": "3XL", "min": 80, "max": 90),
  ("name": "4XL", "min": 96, "max": 108),
  ("name": "XS-S", "min": 12, "max": 18),
  ("name": "S-M", "min": 16, "max": 27),
  ("name": "S-L", "min": 16, "max": 36),
  ("name": "M-L", "min": 24, "max": 36),
  ("name": "L-XL", "min": 32, "max": 54),
  ("name": "Xl-2XL", "min": 48, "max": 72),
  ("name": "2Xl-3XL", "min": 64, "max": 90),
  ("name": "3Xl-4XL", "min": 80, "max": 108)
));

// Usage example
@each $clamp in $createTextSizes {
  $name: map-get($clamp, "name");
  $value: map-get($clamp, "value");

  .#{$name} {
    font-size: #{$value};
  }
}

// Usage example
@each $clamp in $createSpacing {
  $name: map-get($clamp, "name");
  $value: map-get($clamp, "value");

  .spacing-#{$name} {
    --spacing: #{$value};
  }
}
